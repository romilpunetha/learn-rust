// Autogenerated by Thrift Compiler (0.22.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// ObjectData
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct ObjectData {
  pub object_type: String,
  pub data: Vec<u8>,
}

impl ObjectData {
  pub fn new(object_type: String, data: Vec<u8>) -> ObjectData {
    ObjectData {
      object_type,
      data,
    }
  }
}

impl TSerializable for ObjectData {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<ObjectData> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<Vec<u8>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bytes()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("ObjectData.object_type", &f_1)?;
    verify_required_field_exists("ObjectData.data", &f_2)?;
    let ret = ObjectData {
      object_type: f_1.expect("auto-generated code should have checked for presence of required fields"),
      data: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ObjectData");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("object_type", TType::String, 1))?;
    o_prot.write_string(&self.object_type)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 2))?;
    o_prot.write_bytes(&self.data)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AssociationData
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AssociationData {
  pub assoc_type: String,
  pub data: Vec<u8>,
  pub created_time: i64,
  pub updated_time: Option<i64>,
  pub time1: Option<i64>,
  pub time2: Option<i64>,
}

impl AssociationData {
  pub fn new<F4, F5, F6>(assoc_type: String, data: Vec<u8>, created_time: i64, updated_time: F4, time1: F5, time2: F6) -> AssociationData where F4: Into<Option<i64>>, F5: Into<Option<i64>>, F6: Into<Option<i64>> {
    AssociationData {
      assoc_type,
      data,
      created_time,
      updated_time: updated_time.into(),
      time1: time1.into(),
      time2: time2.into(),
    }
  }
}

impl TSerializable for AssociationData {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AssociationData> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<Vec<u8>> = None;
    let mut f_3: Option<i64> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<i64> = None;
    let mut f_6: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bytes()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i64()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i64()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i64()?;
          f_6 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("AssociationData.assoc_type", &f_1)?;
    verify_required_field_exists("AssociationData.data", &f_2)?;
    verify_required_field_exists("AssociationData.created_time", &f_3)?;
    let ret = AssociationData {
      assoc_type: f_1.expect("auto-generated code should have checked for presence of required fields"),
      data: f_2.expect("auto-generated code should have checked for presence of required fields"),
      created_time: f_3.expect("auto-generated code should have checked for presence of required fields"),
      updated_time: f_4,
      time1: f_5,
      time2: f_6,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("AssociationData");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("assoc_type", TType::String, 1))?;
    o_prot.write_string(&self.assoc_type)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 2))?;
    o_prot.write_bytes(&self.data)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("created_time", TType::I64, 3))?;
    o_prot.write_i64(self.created_time)?;
    o_prot.write_field_end()?;
    if let Some(fld_var) = self.updated_time {
      o_prot.write_field_begin(&TFieldIdentifier::new("updated_time", TType::I64, 4))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.time1 {
      o_prot.write_field_begin(&TFieldIdentifier::new("time1", TType::I64, 5))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.time2 {
      o_prot.write_field_begin(&TFieldIdentifier::new("time2", TType::I64, 6))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AssociationQuery
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AssociationQuery {
  pub id1: i64,
  pub id2: Option<i64>,
  pub assoc_type: String,
  pub start_time: Option<i64>,
  pub end_time: Option<i64>,
  pub limit: Option<i32>,
  pub offset: Option<i64>,
}

impl AssociationQuery {
  pub fn new<F2, F4, F5, F6, F7>(id1: i64, id2: F2, assoc_type: String, start_time: F4, end_time: F5, limit: F6, offset: F7) -> AssociationQuery where F2: Into<Option<i64>>, F4: Into<Option<i64>>, F5: Into<Option<i64>>, F6: Into<Option<i32>>, F7: Into<Option<i64>> {
    AssociationQuery {
      id1,
      id2: id2.into(),
      assoc_type,
      start_time: start_time.into(),
      end_time: end_time.into(),
      limit: limit.into(),
      offset: offset.into(),
    }
  }
}

impl TSerializable for AssociationQuery {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AssociationQuery> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<i64> = None;
    let mut f_5: Option<i64> = None;
    let mut f_6: Option<i32> = None;
    let mut f_7: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i64()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i64()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i32()?;
          f_6 = Some(val);
        },
        7 => {
          let val = i_prot.read_i64()?;
          f_7 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("AssociationQuery.id1", &f_1)?;
    verify_required_field_exists("AssociationQuery.assoc_type", &f_3)?;
    let ret = AssociationQuery {
      id1: f_1.expect("auto-generated code should have checked for presence of required fields"),
      id2: f_2,
      assoc_type: f_3.expect("auto-generated code should have checked for presence of required fields"),
      start_time: f_4,
      end_time: f_5,
      limit: f_6,
      offset: f_7,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("AssociationQuery");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id1", TType::I64, 1))?;
    o_prot.write_i64(self.id1)?;
    o_prot.write_field_end()?;
    if let Some(fld_var) = self.id2 {
      o_prot.write_field_begin(&TFieldIdentifier::new("id2", TType::I64, 2))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("assoc_type", TType::String, 3))?;
    o_prot.write_string(&self.assoc_type)?;
    o_prot.write_field_end()?;
    if let Some(fld_var) = self.start_time {
      o_prot.write_field_begin(&TFieldIdentifier::new("start_time", TType::I64, 4))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.end_time {
      o_prot.write_field_begin(&TFieldIdentifier::new("end_time", TType::I64, 5))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.limit {
      o_prot.write_field_begin(&TFieldIdentifier::new("limit", TType::I32, 6))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.offset {
      o_prot.write_field_begin(&TFieldIdentifier::new("offset", TType::I64, 7))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// BatchObjectRequest
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct BatchObjectRequest {
  pub object_ids: Vec<i64>,
  pub object_type: String,
}

impl BatchObjectRequest {
  pub fn new(object_ids: Vec<i64>, object_type: String) -> BatchObjectRequest {
    BatchObjectRequest {
      object_ids,
      object_type,
    }
  }
}

impl TSerializable for BatchObjectRequest {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<BatchObjectRequest> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<Vec<i64>> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<i64> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = i_prot.read_i64()?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("BatchObjectRequest.object_ids", &f_1)?;
    verify_required_field_exists("BatchObjectRequest.object_type", &f_2)?;
    let ret = BatchObjectRequest {
      object_ids: f_1.expect("auto-generated code should have checked for presence of required fields"),
      object_type: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("BatchObjectRequest");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("object_ids", TType::List, 1))?;
    o_prot.write_list_begin(&TListIdentifier::new(TType::I64, self.object_ids.len() as i32))?;
    for e in &self.object_ids {
      o_prot.write_i64(*e)?;
    }
    o_prot.write_list_end()?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("object_type", TType::String, 2))?;
    o_prot.write_string(&self.object_type)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// BatchAssociationRequest
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct BatchAssociationRequest {
  pub queries: Vec<AssociationQuery>,
}

impl BatchAssociationRequest {
  pub fn new(queries: Vec<AssociationQuery>) -> BatchAssociationRequest {
    BatchAssociationRequest {
      queries,
    }
  }
}

impl TSerializable for BatchAssociationRequest {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<BatchAssociationRequest> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<Vec<AssociationQuery>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<AssociationQuery> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_1 = AssociationQuery::read_from_in_protocol(i_prot)?;
            val.push(list_elem_1);
          }
          i_prot.read_list_end()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("BatchAssociationRequest.queries", &f_1)?;
    let ret = BatchAssociationRequest {
      queries: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("BatchAssociationRequest");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("queries", TType::List, 1))?;
    o_prot.write_list_begin(&TListIdentifier::new(TType::Struct, self.queries.len() as i32))?;
    for e in &self.queries {
      e.write_to_out_protocol(o_prot)?;
    }
    o_prot.write_list_end()?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

